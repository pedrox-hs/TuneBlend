import org.gradle.api.internal.FactoryNamedDomainObjectContainer

def projectKey = findProperty('sonar.projectKey') ?: System.getenv('SONAR_PROJECT_KEY')
def organization = findProperty('sonar.organization') ?: System.getenv('SONAR_ORGANIZATION')
def hostUrl = findProperty('sonar.host.url') ?: System.getenv('SONAR_HOST_URL')

allprojects {
    apply plugin: libs.plugins.sonarCloud.get().pluginId

    afterEvaluate {
        project.configureSonarProperties()
    }
}

tasks.matching {
    task -> task.name.startsWith('sonar')
}.each { task ->
    task.dependsOn provider {
        subprojects.collect { subproject ->
            subproject.tasks.matching {
                it.name ==~ /(lint|detekt|jacocoTestReport|createDebugUnitTestCoverageReport|build)/
            }
        }
    }
}

Project.metaClass.configureSonarProperties = {
    def project = delegate
    def isAndroidProject = project.extensions.findByName('android') != null

    project.sonar {
        properties {
            property('sonar.projectKey', projectKey)
            property('sonar.projectName', project.path == ':' ? rootProject.name : project.path.substring(1))

            property('sonar.organization', organization)
            property('sonar.host.url', hostUrl ?: 'https://sonarcloud.io')

            properties["sonar.sources"] += isAndroidProject ? project.android.sourceSets.srcDirs() : []
            properties["sonar.tests"] = properties["sonar.tests"] ?: []
            properties["sonar.tests"] += isAndroidProject ? project.android.sourceSets.testDirs() : []

            property('sonar.androidLint.reportPaths', fileTree(
                    dir: layout.buildDirectory,
                    include: 'reports/lint-results*.xml',
            ).files)
            property('sonar.kotlin.detekt.reportPaths', fileTree(
                    dir: layout.buildDirectory,
                    include: 'reports/detekt/**/*.xml',
            ).files)
            property('sonar.coverage.jacoco.xmlReportPaths', fileTree(
                    dir: layout.buildDirectory,
                    include: 'reports/jacoco/**/*.xml',
            ).files)
            property('sonar.coverageReportPaths', fileTree(
                    dir: layout.buildDirectory,
                    include: 'reports/coverage/**/report.xml',
            ).files)

            property('sonar.testExecutionReportPaths', fileTree(
                    dir: layout.buildDirectory,
                    include: [
                            'outputs/unit_test_code_coverage/**/*.exec',
                            'outputs/code_coverage/**/*.ec',
                    ],
            ).files)
        }
    }
}

FactoryNamedDomainObjectContainer.metaClass.srcDirs = {
    [
            delegate.main.kotlin.srcDirs,
            delegate.debug.kotlin.srcDirs,
            delegate.release.kotlin.srcDirs,
    ].onlyExisting()
}

FactoryNamedDomainObjectContainer.metaClass.testDirs = {
    [
            delegate.test.kotlin.srcDirs,
            delegate.androidTest.kotlin.srcDirs,
    ].onlyExisting()
}

List.metaClass.onlyExisting = {
    delegate.collectMany { it.asList() }
            .toSet()
            .findAll { it.exists() }
}
